27.07.2025 - начало разработки
Цель: создать маломерную копию TickTick

1) Для начала создал схему будущей таблицы с задачами. Логика следующая: таблица Todos содержит документы tasks с объектами task, который содержат поля id, body, completed. Каждый документ содержит userId, который позволяет находить его.
В дальнейшем лучшим подходом будет хранить рабочие пространства с Id пользователя-владельца. Уже в этом пространстве будут разные списки задач.
2) Создал 2 функции: AddTasks и GetTasks. Первая добавляет задачу в список, а вторая возвращает список задач.
3) Функции подключил во фронтенде.
4) Далее нужно реализовать вспомогательные функции для изменения и удаления задач.

28.07
1) Скопировал вручную все иконки с TickTick. Начал подгонять UI.
2) Подключил создание задач. Начал работать над маркерами, но понял, что фон установить не получится с актуальными SVG. Нужно в иллюстраторе сделать его прозрачным и оставить обводку.

29.07
1) Решил проблему с изменением цвета SVG. Просто экспортировал сгруппированные обводку и заливку. Позже установил для фигуры заливки заливку 'currentColor'. Это позволило устанавливать цвет заливки через text, а обводки через fill.
2) Создаю функцию обновления задач

30.07
1) Создана функция удаления задач. Пришлось создать контекстное меню, в котором разместил кнопку удаления. пришлось создать стейт для хранения id задачи, чтобы все действия контекстного меню велись с ней. Функция удаления работает корректно.
2) Берусь за реализацию функции изменения задач. В TickTick нажатие курсором на текст задачи превращает его в текстовое поле, но незаметно. Также все неативные задачи выносятся в низ списка (вообще, по сути, в отдельный список). Создам функцию обновления всей задачи и опробую её на действии "выполнено".
Всё работает. Дальше нужно реализовать:
- вывод списка задач по порядку в зависимости от выполненности. Также стоит подумать, как создать отдельные списки для разного рода задач. Один из вариантов: в массиве хранить другие массивы (что может быть перегруженным подходом). Другой вариант: таблицу БД переделать под рабочее пространство, которое хранить ПРОЕКТЫ (списки задач). И там уже будут основные по типу: все, сегодня, архив, корзина, завершённые. 
- редактирование по нажатию на текст

31.07
1) Осознал, что работать с моей схемой БД дальше очень проблематично. Сортировка и фильтрация задач станет ужасом. Придётся переписатьв все функции и схему.
2) Схема БД переписана, все функции переделаны и работают. Также подключена индексация по выполненности задачи. 
3) Берусь за открытие задачи в окне рядом, 3 блоком. Всё просто, в стейте отслеживаем выбранную задачу. Если задача выбрана, то выводим данные о ней. Если нет - пустоту. 
'COMMIT'

01.08
1) Правлю UI. Блок задачи вынесен в отдельный компонент.
2) Создан 3 блок для полного просмотра задачи. Создан запрос на бэке для получения отдельной задачи по id. Пока что вывожу только содержание задачи.

Нужно сделать:
- элементы для ресайза блоков (между блоками распологаются элементы, на которые можно навестись и перетащить. Взимодействие с ними меняет стейт)
- рендер задач в разных списках. Т.е. актуальные вверху, а выполненные отдельный списком снизу. Список предполагает, что его можно сворачивать.

02.08
'COMMIT' 
1) Прокачиваю блок с полным содержанием задачи. Для этого нужно сделать:
- общую структуру (чекмарк, содержимое задачи)
- переключение между описанием и вложенным списком
  - вложенные задачи (нужно изменить схему задачи, чтобы сохранять ещё и вложенные задачи. Скорее всего в массив subtasks, который будет содержать объекты задач сжатого вида)
  - для описания нужно добавить в схему поле description / details
- необходимо создать блок, который будет отображать процентное содержание задачи, если есть субтаски
2) Реализовал за день:
- меню приоритетов
- Полную структуру правого меню (не считая описания / подзадач)
- изменил схему документа в БД

Надо будет сделать:
- меню переключения между группами тасок
- реализовать создание групп задач и сделать базовые (сегодняшние, все и т.п.)
- подумать над контекстными меню. У 3 блока тоже есть кнопка "Подробнее", которая выводит на контекстное меню. Оно содержит отличные от предыдущего меню (2 блока) поля. Есть варианты такие:
  1) Создать второй компонент меню, который будет содержать свои поля. Неплохо звучит, т.к. других меню (вроде как) нет. К тому же подход более простой, ведь не придётся усложнять первый компонент.
  2) Первый компонент меню улучшить, чтобы он работал с массивами полей. Т.е. мы заранее создадим объекты, которые будут содержать поля меню (название, функцию и т.п.). Затем будем просто передавать в этот компонент инфу о том, какой объект нужно использовать. 


05.08
1) Доделал компонент с приоритетами задачи.
2) Понял, что многие функции мутаций нужно выносить на глобальный уровень, чтобы использовать в разных местах. Вынес функцию удаления в хук.
3) Вынес в провайдер выбор активной задачи, чтобы обнулять стейт после удаления задачи (до этого компонент оставался на месте)
4) Выношу остальные функции на глобальный уровень. Создал глобальный хук useTaskActions, который будет содержать все функции-взаимодействия с задачами. Вынес туда handleTaskCheck
5) Настроил изменение цвета при смене приоритета.
'COMMIT' 

06.08
1) Делаю редактирование задачи. Логика: 
- 3 стейта (idEditing, inputValue, debouncedValue) + обработчик мутации + inputRef (для автофокуса)
- Нажатие на текст меняет idEditing и возвращается не div, а input элемент. Также фокус ставится на input (через useRef). Ввод символов вызывает изменение БД через мутацию, но debounce-функция сокращает количество запросов.
- допом подключены handleKeyDown для отслеживания Enter (закончить ввод) и handleBlur, чтобы отслеживать смещение фокуса с input. Ещё через UEF мы следим за изменением самого содержимого и устанавливаем его в inputValue и debouncedValue.
Работает отлично.

2) Создаю описание + подзадачи. Это связанные пункты, поэтому логика будет сложноватой:
- Если есть описание, то рендерим описание
- если есть подзадачи, то рендерим подзадачи, 
- описание может быть добавлено, если есть подзадачи, но не наоборот
- переключение из подзадач в описание сохраняет само описание, но обратное переключение удаляет его
- есть идея с пробелом между описанием и подзадачами, можно попробовать так удалять

другой вариант (более простой):
- в схеме будет description (описание), subtasks (подзадачи) и добавим details (обратный массив из подзадач)
- создадим функцию переключения между подзадачами и деталями, а описание проработаем отдельно

Изменил схему, поключил такое же редактирование описания задачи.

11.08
1) Выбрал такой подход к реализации:
- будет всего один массив - subtasks. Он будет содержать объекты с полями (completed, body, _id).
- Новая задача будет отображать пустоту, но можно будет нажать на поле ввода и ввести обычный абзац. Нажатие Return будет сохранять объект и давать создать новый.
- Toggler будет переключать отображение подзадач между обычными строками и элементами задач.
Такой подход позволит не переводить массивы друг в друга, а просто менять на фронте отображение одного.
Сложность: обработка поля "completed" заставит патчить весь массив, поэтому ограничим количество подзадач до 10.

13.08
1) После долгих размышлений пришёл к тому, что надо вынести подзадачи в отдельную таблицу. Такой подход позволит работать с подзадачами отдельно и быстро. Так не придётся делать сложные мутации с обновлением вложенного массива. 
(В таком случае нужно поправить TaskCard компонент)

За этот день сделал:
- обновил схему, разделил на 2 разных таблицы;
- создал отдельный файл для мутаций подзадач;
- создал отдельный файл для обработчиков мутаций подзадач;
- Подключил в UI создание пустой подзадачи, когда переключаем отображение на "list", а массив подзадач пуст;
- Создал компонент редактуриемого содержимого подзадачи (всё работает)
- в схему задач включил subtasksCount-поле, чтобы отслеживать количество подзадач. Везде сменил ручное вычисление на получение этого поля.
- Исправил UI отображения иконок, элементов и их стилей (Исправлено: если одна задача имела подзадачи, то иконка чекмарка менялась на список у всех. Теперь placeholder описания задачи отображается при фокусе, а не наведении. Изменены названия компонентов на Editable для лучшей читаемости кода. Исправлен цвет иконок подзадач. Элемент подзадачи подкорректирован для соответствия примеру, изменена иконка удаления);
'COMMIT' 

14.08
1) Подключил создание новой задачи по нажатию Return
2) Ограничил количество подзадач до 5 и создал логику выхода из редактирования, если лимит исчерпан
3) Удалось сделать фокус на новом элементе, удаление в случае нажатия Backspace в пустой задаче, а также фокус на предыдущей задаче после удаления задачи перед ней.
'COMMIT' 

15.08
1) Занимаюсь группами тасок. Сначала создал динамический роут: из '/tasks' в '/tasks/[group]'
2) Остаётся только менять query-параметр страницы и передавать его же на бэк, чтобы Convex возвращал сразу отрендереный список.

План на сегодня:
- UI групп
- создание логики с query-параметрами
- подключение бэка к логике
- правка существующих элементов под новую логику:
    1. У задач должен отображаться цвет группы (если она кастомная) и название этой группы.
    2. Input для создания задач также должен содержать указание, в какой группе создаётся задача.
    3. Создание задачи в бэке теперь должно содержать укзаание на группу.
    4. Полный вид задачи также нужно обновить.
- создать логику создания, изменения группы задачи и её удаления

Описываю схему работы фильтрации по группам: будут вшитые по типу `all`, `today`, `tomorrow`, `inbox`, а также кастомные. Они будут храниться в отдельной таблице. А затем подгружаться по запросу. 


17.08
1) UI готов

18.08
1) Сначала хотел создать провайдер, чтобы через стейт устанавливать активную группу задач. Но у меня динамический роут, поэтому логичнее принимать параметр и по нему уже фильтровать.
- стал задавать роут в компоненте карточки группы;
- получил параметры через хук в компоненте списка задач;
- на бэке принял параметры и вернул отфильтрованный список;

Подумать на потом:
- как сохранять удалённые задачи (скорее куда); – скорее всего в схему нужно добавить новое поле 'deleted', чтобы выводить в отдельном списке. Добавить функцию возврата. Отдельный вопрос - полное удаление. Можно хранить также дату удаления и, если она истекла (месяц, к примеру), то стирать. Как запускать такую очистку - пока хз.
- Нужно научиться вычислять количество задач в группах, для этого нужен Aggregate

19.08
1) Создал мутации и запросы для работы с группами. Также создал хуки.
2) Разработал меню для создания новой группы-списка. Подключил к бэку.

21.08
1) Также делаю контекстное меню и его кнопку для карточек групп. Нужно создать общий компонент подложки для таких меню
2) Я добавил функцию удаления группы, но в обработчике есть проблема: принимается groupId, который в рантайме определяется как строка, а не Id. Поэтому выделяется как ошибка TS. Как исправить - без понятия. Однако проблема не должна возникнуть, т.к. у базовых групп со строкой Id вообще нет доступа к этой функции. Единственный вариант - на сервере принимать 2 типа: строку и Id, однако тогда придётся делать доп. проверку. Но я не вижу смысла сейчас усложнять логику бэка, когда функции и так недоступна. Скорее всего вынесу строку в исключения.
Нейронка предложила решить так: groupId: groupId as Id<"taskGroups">

На потом:
- нужно фильтры и метки (группы) разработать

23.08
1) Решил добавить редактирование групп. Для этого в меню создания нужно передавать доп. аргумент, который будет сообщать о том, что мы редактируем, а не создаём. Ui настроен, осталось только разобраться с иконкой. 

25.08
1) Меню редактирования настроено. Добавлен лоадер и подгрузка актуальных данных, если задача редактируется. Иконка также выбирается динамически.
2) Создал меню выбора иконки.
3) Обнаружилась проблема (или неудобство скорее): в union типе иконки слишком много литералов - это усложняет чтение. Также добавление новой иконки заставляет обновлять типы везде, где они используются. 
'COMMIT' 

4) Ошибка: создание подзадачи создаёт пустой компонент подзадачи. Однако счётчик не увеличивается, а уменьшение может быть бесконечным из-за этого.
5) Ещё ошибка: удаление с помощью Backspace, когда строка подзадачи пустая - работает 50/50, т.к. после удаления Convex пытается обновить документ. 
Всё решилось добавлением в debounce-функцию проверки: `if (!inputValue.trim()) return`

6) Сделал отображение названия группы в полной версии задачи (также доп. есть данные о группе, если нужно стилизовать)

26.08
1) Отредактировал контекстное меню для групп. 
2) Сделал отображение названия группы в списке задач.
3) Сделал название группы редактируемым, однако input рендерится с высотой на 1px меньше, чем нужно.


27.08
1) исправлена проблема слетания активной группы в боковом меню. Обновление страницы вызывало применение первоначального значения стейта (all), даже если отображалась другая группа.
2) исправлены компоненты редактируемых названий задач и групп (input был на 1px меньше. Решилось фиксированной высотой)
3) Добавлен лоадер в полную версию задачи
3) Сделал смену группы в полной версии задачи.

29.08
1) Добавил динамический рендеринг календаря

01.09
1) Решил проблему с типизацией в TaskFullView
2) Делаю создание задачи в той группе, которая активна в данный момент.
3) Поправил пустой лист задач (надпись), спрятал поле ввода в группах "Выполнено" и "Удалённые"
4) Работаю над компонентом карточки задачи. Добавил отображение группы и цветового обозначения (сделал только цветную точку)

02.09
1) Дорабатываю цветовое обозначение, сделал after-элемент (линию) слева от задачи.
2) Создал меню выбора приоритета для контекстного меню задачи. 
3) Создал функцию для дублирования задач.
В дальнейшем нужно будет обработчики помещать в один файл, а исопльзовать их в функциях как on(Action), а не очередной handle - так семантически более правильно.
'COMMIT'

05.09
1) Делаю меню удаления группы (от себя добавил возможность сохранить задачи после удаления)
2) Удаление задач вместе с группой подключено

06.09
1) Добавил подменю для контекстного меню задачи (перемещение в другую группу). Работает как hover-меню с таймером.
2) Делаю копирование ссылки на задачу. Для этого нужно сделать доп. динамический роут после [group] - [task]

09.09
1) Нужно было заранее продумать роуты, чтобы видеть в URL id задачи. Однако я не предусмотрел это и динамический маршрут будет сложновато сделать (возможно, но запарно). Поэтому я просто вынес id в searchParams, выглядит гармонично: "/tasks/all?taskId=kd79dt2bqb292a5e8e7btvbmqh7njthn". Также хук UEF теперь позволяет сохранять в памяти активную таску (для FullView) – теперь ничего не слетает после перезагрузки страницы или переходу по URL.
2) Нажатие на группу в компоненте задачи сначала открывает задачу - нужно предотвратить всплытие
3) Почему-то в полном виде у задач без группы нельзя менять группу (не открывается меню) - исправляю (была проверка на наличие группы у документа).
'COMMIT'
4) Проведена работа над редиректом. Описание проблемы: деплой на Vercel открывает пустую страницу, middleware не совершает редирект. В итоге был опробовал rewrites в next.config, но это не помогло. Поэтому просто разделил логику middleware и конфига 50/50. В конфиг добавил redirect. Не самое крутое решение, но оно работает.

10.09
1) Начинаю интенсивную работу над меню настроек профиля:
- сделал оверлей, подложку, навигацию, которая может скрываться;
- полностью настроил закрывание навигации, добавив кнопку и обработчик кликов вне блока;
- сразу сделал адаптив;
- начал разрабатывать блок настроек account;

11.09
1) Создал блок account
2) Создал блок Premium
3) Создал блок modules

13.09
1) Добавил favicon`ку 
2) Создал структуру настроек Smart-списков, но не продумал логику БД

14.09
1) Создал меню настроек Smart-списков. Ui польностью функциональный, только нужно подкрутить Бэк и добавить иконки

15.09
1) Сделал меню для настроек уведомлений.
2) Для выбора времени решил использовать готовый компонент из MUI

16.09
1) Работал над блоком "Внешний вид", создал UI внутренних блоков (базово).
2) Понял, как буду подгружать все темы, создал также стили для них и все данные.
3) Создал провайдер для установки темы.

17.09
1) Изменил модель юзера, чтобы там хранить настройки внешнего вида приложения. В провайдере получаю из БД настройки и меняю тему в зависимости от них.
2) Продолжил работать с UI, закончил подвкладку "Тема"
3) Начал вводить переменные стилей для всего сайта (Пока что есть AsideMenu, ProjectListMenu)
p.s.- сложно понимать, что теперь везде стили нужно подогнать под разные темы (прежде всего светлую и тёмную)

18.09
1) Разобрался с проблемой ширины скроллбара для вкладки внешнего вида (в одной подвкладке нужен был скролл, в другой – нет). Решил добавлением css-свойства: '[scrollbar-gutter:stable]' только в случае этой вкладки
2) Обратил внимание на то, что постоянно нужно писать длинную конструкцию для распаковки динамических стилей. Почему-то сразу не додумался использовать сокращение: 'const themeStyles = colorThemesStyles[theme as keyof typeof colorThemesStyles]'
3) Добавил новые поля в датасеты тем, чтобы менять цвет подложек и фона сайта

21.09
1) Делаю подвкладку "Отображение" - UI
2) Для этого решил сделать иконку календаря всегда актуальной.
3) Закончил делать вкладку "Внешний вид", подключён БЭК, UI есть, но нужно подгонять под тёмную тему
4) Создал мини-меню для смены темы в любом месте сайта. Позволит быстро разобраться с найстроками темы.
5) Отсмотрел оставшиеся настройки, скорее всего их оставлю на потом из-за глубокой вложенности. На одну вкладку уйдёт 1+ день, как минимум. Лучше сосредоточусь на остальном UI, чтобы решить базовые проблемы приложения. Пока что создал для вкладки настроек "Больше" дефолтные значения.
'COMMIT'





Список оставшихся задач:
в настройках:
  - подключить модули к профилю юзера
  - создать роуты модулей и их отображение по доступности в профиле
  - подключить Умный список к профилю


- создать универсальный возврат иконки календаря.
- Сейчас отображение подзадач и деталей меняется глобально, а не для отдельных задач; (решение - новое поле в документе задачи, больше никак)
- исключить мутацию, если тело задачи не поменялось во время редактирования;
- для задач добавить логику (и поле в схему) - pinned, deleted, startDate (+ заменить dueDate на endDate). Логика: закрепить, не буду делать, переместить, приоритет, дублировать.
- для подзадач оставлять всегда один input;
- группы фильтров и меток;
- обработчик для закрытия контекстного меню во время выбора настроек группы (нажатие вне меню);
- сохранение удалённых задач; (скорее всего нужно добавить новое поле 'isDeleted' в БД, чтобы выводить в отдельном списке)
- вычисление количества задач в группах; (понадобится Aggregate)
- настройки пользователя;