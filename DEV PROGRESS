27.07.2025 - начало разработки
Цель: создать маломерную копию TickTick

1) Для начала создал схему будущей таблицы с задачами. Логика следующая: таблица Todos содержит документы tasks с объектами task, который содержат поля id, body, completed. Каждый документ содержит userId, который позволяет находить его.
В дальнейшем лучшим подходом будет хранить рабочие пространства с Id пользователя-владельца. Уже в этом пространстве будут разные списки задач.
2) Создал 2 функции: AddTasks и GetTasks. Первая добавляет задачу в список, а вторая возвращает список задач.
3) Функции подключил во фронтенде.
4) Далее нужно реализовать вспомогательные функции для изменения и удаления задач.

28.07
1) Скопировал вручную все иконки с TickTick. Начал подгонять UI.
2) Подключил создание задач. Начал работать над маркерами, но понял, что фон установить не получится с актуальными SVG. Нужно в иллюстраторе сделать его прозрачным и оставить обводку.

29.07
1) Решил проблему с изменением цвета SVG. Просто экспортировал сгруппированные обводку и заливку. Позже установил для фигуры заливки заливку 'currentColor'. Это позволило устанавливать цвет заливки через text, а обводки через fill.
2) Создаю функцию обновления задач

30.07
1) Создана функция удаления задач. Пришлось создать контекстное меню, в котором разместил кнопку удаления. пришлось создать стейт для хранения id задачи, чтобы все действия контекстного меню велись с ней. Функция удаления работает корректно.
2) Берусь за реализацию функции изменения задач. В TickTick нажатие курсором на текст задачи превращает его в текстовое поле, но незаметно. Также все неативные задачи выносятся в низ списка (вообще, по сути, в отдельный список). Создам функцию обновления всей задачи и опробую её на действии "выполнено".
Всё работает. Дальше нужно реализовать:
- вывод списка задач по порядку в зависимости от выполненности. Также стоит подумать, как создать отдельные списки для разного рода задач. Один из вариантов: в массиве хранить другие массивы (что может быть перегруженным подходом). Другой вариант: таблицу БД переделать под рабочее пространство, которое хранить ПРОЕКТЫ (списки задач). И там уже будут основные по типу: все, сегодня, архив, корзина, завершённые. 
- редактирование по нажатию на текст

31.07
1) Осознал, что работать с моей схемой БД дальше очень проблематично. Сортировка и фильтрация задач станет ужасом. Придётся переписатьв все функции и схему.
2) Схема БД переписана, все функции переделаны и работают. Также подключена индексация по выполненности задачи. 
3) Берусь за открытие задачи в окне рядом, 3 блоком. Всё просто, в стейте отслеживаем выбранную задачу. Если задача выбрана, то выводим данные о ней. Если нет - пустоту. 
'COMMIT'

01.08
1) Правлю UI. Блок задачи вынесен в отдельный компонент.
2) Создан 3 блок для полного просмотра задачи. Создан запрос на бэке для получения отдельной задачи по id. Пока что вывожу только содержание задачи.

Нужно сделать:
- элементы для ресайза блоков (между блоками распологаются элементы, на которые можно навестись и перетащить. Взимодействие с ними меняет стейт)
- рендер задач в разных списках. Т.е. актуальные вверху, а выполненные отдельный списком снизу. Список предполагает, что его можно сворачивать.

02.08
'COMMIT'
