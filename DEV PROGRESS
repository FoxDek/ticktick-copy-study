27.07.2025 - начало разработки
Цель: создать маломерную копию TickTick

1) Для начала создал схему будущей таблицы с задачами. Логика следующая: таблица Todos содержит документы tasks с объектами task, который содержат поля id, body, completed. Каждый документ содержит userId, который позволяет находить его.
В дальнейшем лучшим подходом будет хранить рабочие пространства с Id пользователя-владельца. Уже в этом пространстве будут разные списки задач.
2) Создал 2 функции: AddTasks и GetTasks. Первая добавляет задачу в список, а вторая возвращает список задач.
3) Функции подключил во фронтенде.
4) Далее нужно реализовать вспомогательные функции для изменения и удаления задач.

28.07
1) Скопировал вручную все иконки с TickTick. Начал подгонять UI.
2) Подключил создание задач. Начал работать над маркерами, но понял, что фон установить не получится с актуальными SVG. Нужно в иллюстраторе сделать его прозрачным и оставить обводку.

29.07
1) Решил проблему с изменением цвета SVG. Просто экспортировал сгруппированные обводку и заливку. Позже установил для фигуры заливки заливку 'currentColor'. Это позволило устанавливать цвет заливки через text, а обводки через fill.
2) Создаю функцию обновления задач

30.07
1) Создана функция удаления задач. Пришлось создать контекстное меню, в котором разместил кнопку удаления. пришлось создать стейт для хранения id задачи, чтобы все действия контекстного меню велись с ней. Функция удаления работает корректно.
2) Берусь за реализацию функции изменения задач. В TickTick нажатие курсором на текст задачи превращает его в текстовое поле, но незаметно. Также все неативные задачи выносятся в низ списка (вообще, по сути, в отдельный список). Создам функцию обновления всей задачи и опробую её на действии "выполнено".
Всё работает. Дальше нужно реализовать:
- вывод списка задач по порядку в зависимости от выполненности. Также стоит подумать, как создать отдельные списки для разного рода задач. Один из вариантов: в массиве хранить другие массивы (что может быть перегруженным подходом). Другой вариант: таблицу БД переделать под рабочее пространство, которое хранить ПРОЕКТЫ (списки задач). И там уже будут основные по типу: все, сегодня, архив, корзина, завершённые. 
- редактирование по нажатию на текст

31.07
1) Осознал, что работать с моей схемой БД дальше очень проблематично. Сортировка и фильтрация задач станет ужасом. Придётся переписатьв все функции и схему.
2) Схема БД переписана, все функции переделаны и работают. Также подключена индексация по выполненности задачи. 
3) Берусь за открытие задачи в окне рядом, 3 блоком. Всё просто, в стейте отслеживаем выбранную задачу. Если задача выбрана, то выводим данные о ней. Если нет - пустоту. 
'COMMIT'

01.08
1) Правлю UI. Блок задачи вынесен в отдельный компонент.
2) Создан 3 блок для полного просмотра задачи. Создан запрос на бэке для получения отдельной задачи по id. Пока что вывожу только содержание задачи.

Нужно сделать:
- элементы для ресайза блоков (между блоками распологаются элементы, на которые можно навестись и перетащить. Взимодействие с ними меняет стейт)
- рендер задач в разных списках. Т.е. актуальные вверху, а выполненные отдельный списком снизу. Список предполагает, что его можно сворачивать.

02.08
'COMMIT' 
1) Прокачиваю блок с полным содержанием задачи. Для этого нужно сделать:
- общую структуру (чекмарк, содержимое задачи)
- переключение между описанием и вложенным списком
  - вложенные задачи (нужно изменить схему задачи, чтобы сохранять ещё и вложенные задачи. Скорее всего в массив subtasks, который будет содержать объекты задач сжатого вида)
  - для описания нужно добавить в схему поле description / details
- необходимо создать блок, который будет отображать процентное содержание задачи, если есть субтаски
2) Реализовал за день:
- меню приоритетов
- Полную структуру правого меню (не считая описания / подзадач)
- изменил схему документа в БД

Надо будет сделать:
- меню переключения между группами тасок
- реализовать создание групп задач и сделать базовые (сегодняшние, все и т.п.)
- подумать над контекстными меню. У 3 блока тоже есть кнопка "Подробнее", которая выводит на контекстное меню. Оно содержит отличные от предыдущего меню (2 блока) поля. Есть варианты такие:
  1) Создать второй компонент меню, который будет содержать свои поля. Неплохо звучит, т.к. других меню (вроде как) нет. К тому же подход более простой, ведь не придётся усложнять первый компонент.
  2) Первый компонент меню улучшить, чтобы он работал с массивами полей. Т.е. мы заранее создадим объекты, которые будут содержать поля меню (название, функцию и т.п.). Затем будем просто передавать в этот компонент инфу о том, какой объект нужно использовать. 


05.08
1) Доделал компонент с приоритетами задачи.
2) Понял, что многие функции мутаций нужно выносить на глобальный уровень, чтобы использовать в разных местах. Вынес функцию удаления в хук.
3) Вынес в провайдер выбор активной задачи, чтобы обнулять стейт после удаления задачи (до этого компонент оставался на месте)
4) Выношу остальные функции на глобальный уровень. Создал глобальный хук useTaskActions, который будет содержать все функции-взаимодействия с задачами. Вынес туда handleTaskCheck
5) Настроил изменение цвета при смене приоритета.
'COMMIT' 

06.08
1) Делаю редактирование задачи. Логика: 
- 3 стейта (idEditing, inputValue, debouncedValue) + обработчик мутации + inputRef (для автофокуса)
- Нажатие на текст меняет idEditing и возвращается не div, а input элемент. Также фокус ставится на input (через useRef). Ввод символов вызывает изменение БД через мутацию, но debounce-функция сокращает количество запросов.
- допом подключены handleKeyDown для отслеживания Enter (закончить ввод) и handleBlur, чтобы отслеживать смещение фокуса с input. Ещё через UEF мы следим за изменением самого содержимого и устанавливаем его в inputValue и debouncedValue.
Работает отлично.

2) Создаю описание + подзадачи. Это связанные пункты, поэтому логика будет сложноватой:
- Если есть описание, то рендерим описание
- если есть подзадачи, то рендерим подзадачи, 
- описание может быть добавлено, если есть подзадачи, но не наоборот
- переключение из подзадач в описание сохраняет само описание, но обратное переключение удаляет его
- есть идея с пробелом между описанием и подзадачами, можно попробовать так удалять

другой вариант (более простой):
- в схеме будет description (описание), subtasks (подзадачи) и добавим details (обратный массив из подзадач)
- создадим функцию переключения между подзадачами и деталями, а описание проработаем отдельно

Изменил схему, поключил такое же редактирование описания задачи.

11.08
1) Выбрал такой подход к реализации:
- будет всего один массив - subtasks. Он будет содержать объекты с полями (completed, body, _id).
- Новая задача будет отображать пустоту, но можно будет нажать на поле ввода и ввести обычный абзац. Нажатие Return будет сохранять объект и давать создать новый.
- Toggler будет переключать отображение подзадач между обычными строками и элементами задач.
Такой подход позволит не переводить массивы друг в друга, а просто менять на фронте отображение одного.
Сложность: обработка поля "completed" заставит патчить весь массив, поэтому ограничим количество подзадач до 10.

13.08
1) После долгих размышлений пришёл к тому, что надо вынести подзадачи в отдельную таблицу. Такой подход позволит работать с подзадачами отдельно и быстро. Так не придётся делать сложные мутации с обновлением вложенного массива. 
(В таком случае нужно поправить TaskCard компонент)

За этот день сделал:
- обновил схему, разделил на 2 разных таблицы;
- создал отдельный файл для мутаций подзадач;
- создал отдельный файл для обработчиков мутаций подзадач;
- Подключил в UI создание пустой подзадачи, когда переключаем отображение на "list", а массив подзадач пуст;
- Создал компонент редактуриемого содержимого подзадачи (всё работает)
- в схему задач включил subtasksCount-поле, чтобы отслеживать количество подзадач. Везде сменил ручное вычисление на получение этого поля.
- Исправил UI отображения иконок, элементов и их стилей (Исправлено: если одна задача имела подзадачи, то иконка чекмарка менялась на список у всех. Теперь placeholder описания задачи отображается при фокусе, а не наведении. Изменены названия компонентов на Editable для лучшей читаемости кода. Исправлен цвет иконок подзадач. Элемент подзадачи подкорректирован для соответствия примеру, изменена иконка удаления);
'COMMIT' 

14.08
1) Подключил создание новой задачи по нажатию Return
2) Ограничил количество подзадач до 5 и создал логику выхода из редактирования, если лимит исчерпан
3) Удалось сделать фокус на новом элементе, удаление в случае нажатия Backspace в пустой задаче, а также фокус на предыдущей задаче после удаления задачи перед ней.
'COMMIT' 


